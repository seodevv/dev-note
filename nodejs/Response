res.status(code)
// HTTP 응답 코드를 설정한다. 응답 코드가 redirect(30x)라면 res.redirect 를 쓰는 것이 낫다.
app.get('/status', (req, res) => {
  res.status(200); // 응답 코드를 200으로 설정한다.
  res.json({ message: res.statusCode }); // 설정된 응답 코드를 응답한다.
});


res.set(name, value)
// 응답 헤더를 설정한다.
app.get('/set', (req, res) => {
  res.set('setHeader', 'header is setted');
  res.json({ message: 'header set' });
});
// Response Header 정보
...
setHeader: header is setted
...


res.cookie(name, value, [options])
// 클라이언트에 저장될 쿠키를 설정하거나 제거한다. // 자세한 내용은 cookie-parser 에서 설명한다.
app.get('/cookie', (req, res) => {
  res.cookie( 'user', { name: 'kim', age: 32 } );
  res.json({ message: 'cookie is setted' });
});


res.redirect([code], url)
// 해당 url 로 code 값과 함께 redirect 한다. // code 미 지정시 기본 값은 302 이다.
app.get('/redirect', (req, res) => {
  res.redirect(200, '/');
});


res.send([code], body)
// 클라이언트에 응답을 보낸다. 상태 코드는 옵션이다. 
// 기본 콘텐츠 타입은 text/html 이므로 text/plain 으로 보내려면 res.set('Content-Type', 'text/plain') 을 먼저 호출해야 한다.
// JSON 을 보낼 거면 res.json 을 사용하는게 효율적이다. (함수 호출이 res.send 보다 적음)
app.get('/send', (req, res) => {
  res.send(200, 'send data');
});


res.json([code], json)
// 클라이언트에 JSON 값을 보낸다.
app.get('/json', (req, res) => {
  res.json(200, { data: 'json data' });
});
